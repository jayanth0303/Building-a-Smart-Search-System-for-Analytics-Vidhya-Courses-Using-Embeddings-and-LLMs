# -*- coding: utf-8 -*-
"""SmartSearchEngine.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l9tvbZ9O7B2il_m8IoQzZDtVGQPe5HqX

## Project Plan
1. Data Collection: Scrape Free courses data from the Analytics Vidhya website.
2. Data Preprocessing: Clean and preprocess the data for search functionalities.
3. Embedding Model: Use a pre-trained language model(BERT) to generate vector embeddings for course descriptions.
4. Search Tool Development: Build a search interface using Gradio for user queries on Keyword Based.
5. Testing and Evaluation: Test the functionality and performance of the search tool.
6. Deployment: Deploy the search tool for public access on a Hugging Face.

## Data Information
"""

import pandas as pd
data = pd.read_csv('AnalyticsVidhya.csv')

data.head(5)

data.info()

"""## Data Cleaning And Preprocessing"""

### Handling Missing Value

# Check for missing values in each column
missingvalues = data.isnull().sum()

print(missingvalues)

# Display rows with missing values
missingrows = data[data.isnull().any(axis=1)]
missingrows



# Drop rows where 'Time(Hours)' or 'Level'
data.dropna(subset=['Level', 'Time(Hours)'], inplace=True)

data

"""### Preprocessing the Data for Embedding

We will need to clean the text data in the CourseTitle and  Description columns before generating embeddings.
1. Lowercasing all text.
2. Removing special characters.
"""

import re
def cleantext(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    return text
data['CourseTitle'] = data['CourseTitle'].apply(cleantext)
data['Description'] = data['Description'].apply(cleantext)

data.head(3)

"""## Embedding Model"""

# Install Library
!pip install transformers sentence-transformers

#Import Pre-trained Model
from sentence_transformers import SentenceTransformer
model = SentenceTransformer('all-MiniLM-L6-v2')

# Generate embeddings for the course descriptions
data['DescriptionEmbeddings'] = data['Description'].apply(lambda desc: model.encode(desc))
# Generate embeddings for course titles
data['TitleEmbeddings'] = data['CourseTitle'].apply(lambda x: model.encode(x))

data.to_csv('courseswithembeddings.csv', index=False)

""" ## Search Tool Development"""

#Implement the Search Functionality
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# Set display options
pd.set_option('display.max_colwidth', 100)
pd.set_option('display.width', 1000)

def search_courses(query, data, model):
    # Generate embedding for the user query
    queryembedding = model.encode(query)

    # Compute cosine similarity between query and course descriptions
    similarities = cosine_similarity([queryembedding], list(data['DescriptionEmbeddings']))[0]

    # Top 5 results
    top5 = 5
    topindices = similarities.argsort()[-top5:][::-1]

    # Retrieve the top results
    results = data.iloc[topindices]
    return results[['CourseTitle', 'Level', 'Category']]

"""### Keyword-Based Search for Free Courses"""

!pip install gradio

#Create the User Interface with Gradio
import gradio as gr
data['CourseTitle'] = data['CourseTitle'].str.title()
def searchinterface(query):
    results = search_courses(query, data, model)
    return results.to_string(index=False)

# Create Gradio interface
interface = gr.Interface(
    fn=searchinterface,
    inputs="text",
    outputs="text",
    title="Smart Engine for Free Courses",
    description="Enter Topic to find relevant free courses."
)

# Launch the interface
interface.launch()

